cmake_minimum_required(VERSION 3.5.1)

set(CMAKE_POSITION_INDEPENDENT_CODE ON)
project(graph_optimizer LANGUAGES CXX C)
set(PROJECT_VERSION 0.1)
set(PROJECT_BRIEF "\"Habana Labs Graph Compiler\"")
set(CMAKE_CXX_STANDARD 17)

# Enable/disable testing
option(TESTS_ENABLED "Enable automatic tests" ON)
option(VTUNE_PROFILER "Enable vtune profiling" OFF)
# set(VTUNE_PROFILER ON)
option(AUTO_GENERATED_TESTS "Compile autogenerated tests" ON)

option(GEN_DOCS "Generate documentation for the synapse" OFF)
option(TESTS_FROM_JSON_ONLY "Disable all tests except Json tests" OFF)

if (GEN_DOCS)
    add_custom_target(synapse_doc)
    add_subdirectory(doc)  # generate documentation
    add_dependencies (synapse_doc doc_training doc_inference)
    return()
endif()

include(cmake/EnforceOutOfTreeBuild.cmake)

# Reduce "warm" compilation time if ccache is available
find_program(CCACHE_PROGRAM ccache)
if(CCACHE_PROGRAM)
    # Support Unix Makefiles and Ninja
    set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE "${CCACHE_PROGRAM}")
    set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK "${CCACHE_PROGRAM}")
endif()

if (DEFINED CLANG_TIDY AND CLANG_TIDY)
find_program(CLANG_TIDY_EXE NAMES clang-tidy-10 clang-tidy clang-tidy-9 clang-tidy-11 clang-tidy-12)
if (CLANG_TIDY_EXE)
    set(CMAKE_CXX_CLANG_TIDY "${CLANG_TIDY_EXE};-extra-arg=-w;-checks=-*,hicpp-avoid-goto")
    message(STATUS "******** clang-tidy --version *******")
    execute_process(COMMAND ${CLANG_TIDY_EXE} --version OUTPUT_VARIABLE CLANG_TIDY_VERSION)
    message(STATUS ${CLANG_TIDY_VERSION})
    message(STATUS "*************************************")
else ()
    message(AUTHOR_WARNING "clang-tidy was not detected. Please install it and rerun CMake")
endif ()
endif()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
set(LIBRARY_OUTPUT_PATH "${CMAKE_BINARY_DIR}/lib")
set(EXECUTABLE_OUTPUT_PATH "${CMAKE_BINARY_DIR}/bin")

include_directories($ENV{HCL_ROOT}/src)
include_directories($ENV{HCL_ROOT}/include)
include_directories(${CMAKE_SOURCE_DIR}/include/internal)
include_directories(${CMAKE_SOURCE_DIR}/src $ENV{SPECS_EXT_ROOT})
include(cmake/SeparateDebugSymbols.cmake)
if(COVERAGE_ENABLED)
    set(CMAKE_CXX_FLAGS_DEBUG "-fPIC -fprofile-arcs -ftest-coverage")
endif()

include(cmake/DisableAVX512.cmake)

set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG -fopenmp -fno-omit-frame-pointer -g1")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp ")


set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

if (NOT CMAKE_BUILD_TYPE)
    message(STATUS "No build type selected, defaulting to Debug")
    set(CMAKE_BUILD_TYPE "Debug")
endif()


#Third party includes
set_directory_properties(PROPERTIES EP_PREFIX ${CMAKE_BINARY_DIR}/ThirdParty)
include(rotator)
include(mme_stack)
set(tpc_api $ENV{BUILD_ROOT_LATEST}/libtpcsim_shared.so)
set(tpc_kernel_api $ENV{BUILD_ROOT_LATEST}/libTpcElfReader.so)
set(hl_thunk $ENV{BUILD_ROOT_LATEST}/libhl-thunk.so)
set(scal $ENV{BUILD_ROOT_LATEST}/libscal.so)
set(hcl_api $ENV{BUILD_ROOT_LATEST}/libhcl.so)
set(hl_logger $ENV{BUILD_ROOT_LATEST}/libhl_logger.so)
set(hl_gcfg $ENV{BUILD_ROOT_LATEST}/libhl_gcfg.so)

disable_avx512_if_needed()

if(VTUNE_PROFILER)
    message($ENV{VTUNE_INSTALL_DIR}/sdk/include)
    include_directories($ENV{VTUNE_INSTALL_DIR}/sdk/include)
    link_directories($ENV{VTUNE_INSTALL_DIR}/sdk/lib64)
    add_definitions(-DVTUNE_ENABLED)
endif()

include_directories(include src/graph_compiler $ENV{TPC_KERNELS_ROOT}/include)

add_subdirectory(src)

if(TESTS_ENABLED)
    if(TESTS_FROM_JSON_ONLY)
        add_subdirectory(tests/json_tests)
    else()
        add_subdirectory(tests)
    endif()
endif()
unset(TESTS_FROM_JSON_ONLY CACHE)