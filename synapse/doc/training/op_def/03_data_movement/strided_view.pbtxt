op {
  name: "Strided View"
  type {
    name: "T"
    definition: "tensor(float32), tensor(bfloat16), tensor(int32)"
    description: "A tensor of rank up to DEVICE_ATTRIBUTE_MAX_DIMS with the elements of type specified in the definition"
  }
  type {
    name: "S"
    definition: "Tensor Shape Type"
    description: "A shape tensor"
  }
  type {
    name: "H"
    definition: "Host to Device Tensor Type"
    description: "A host to device tensor"
  }
  input {
    name: "Real tensor"
    type: "T"
    description: "The input tensor to be viewed."
  }
  input {
    name: "Output shape"
    type: "S"
    description: "The output tensor shape information. Optional (for dynamic shapes usage)."
  }
  input {
    name: "Dynamic strides and offset"
    type: "H"
    description: "Dynamic strides and offset information. Contains synDynamicStridedDmaH2dTensor structure. Optional (for dynamic shapes usage)."
  }
  output {
    name: "View tensor"
    type: "T"
    description: "Strided View result."
  }
  c_structure: "synStridedOpParams"
  attr {
    name: "baseOffset"
    type: "unsigned long int"
    description: "base offset (in elements) from the beginning of tensor `Real Tensor`"
  }
  attr {
    name: "strides[rank(View tensor)]"
    type: "unsigned long int"
    description: "1-D array of strides for performing the view operation."
  }
  summary: "Performs the strided view operation."
  description: "produces a strided view of the input tensor.\n(https://pytorch.org/docs/stable/generated/torch.as_strided.html)"
  "the node has 2 flavors:"
  "- static: use synStridedOpParams to define strides and base offset."
  "- dynamic: use optional strides and offset host to device tensor to define strides and base offset. in this case the node params can be null."
  guid: "strided_view"
}
