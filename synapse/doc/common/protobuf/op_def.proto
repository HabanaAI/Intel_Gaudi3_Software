// *****************************************************************************
// Copyright (C) 2020 HabanaLabs, Ltd.
// All Rights Reserved.
//
// Unauthorized copying of this file, via any medium is strictly prohibited.
// Proprietary and confidential.
//
// Author:
// tcohen@habana.ai
// ******************************************************************************

syntax = "proto3";

package proto;

// Defines Attribute values
message AttrValue {
  repeated bytes s = 1;  // "string"
  repeated int64 i = 2;  // "int"
  repeated float f = 3;  // "float"
  repeated bool b  = 4;  // "bool"
  repeated double d = 5; // "double"
};

enum Datatypes {
  uint8 = 0;
  uint16 = 1;
  uint32 = 2;
  int8 = 3;
  int16 = 4;
  int32 = 5;
  float32 = 6;
  bfloat16 = 7;
  float16 = 8;
  int4 = 9;
  uint4 = 10;
};

// Defines an operation.
message OpDef {
  // Names must be CamelCase and match the regexp "[A-Z][a-zA-Z0-9_]*".
  string name = 1;

  // Describes custom Op types used in this operation for inputs,
  // outputs and attributes.
  message TypeDef {
    // Name for the type. Must match the regexp "[a-z][a-z0-9_]*".
    string name = 1;

    // Can be a list of basic types, list or tensor. 
    // For lists and tensors may also specify size and shape.
    string definition = 2;

    // Human readable description.
    string description = 3;
  }

  // Description of the type(s).
  repeated TypeDef type = 2;

  // Describes Op inputs/outputs.
  message ArgDef {
    // Name for the input/output. Must match the regexp "[a-z][a-z0-9_]*".
    string name = 1;

    // Human readable description.
    string description = 2;

    // Type definition or custom type name.
    string type = 3;

    // Specifies if argument is optional
    bool optional = 6;
  };

  // Description of the input(s).
  repeated ArgDef input = 3;

  // Description of the output(s).
  repeated ArgDef output = 4;

  // Describes Op attributes.
  message AttrDef {
    // Name for the attribute. Must match the regexp "[a-z][a-z0-9_]*".
    string name = 1;

    // Type definition or custom type name.
    string type = 2;

    // Human readable description.
    string description = 3;

    // A reasonable default value.
    AttrValue default = 4;

    // Set of allowed values.
    AttrValue allowed_values = 5;
  }

  // Attributes.
  repeated AttrDef attr = 5;

  // Human readable one-line summary.
  string summary = 6;

  // Human readable description.
  string description = 7;

  // structure for op
  oneof structure {
    // Associated C structure.
    string c_structure = 8;

    // structure name to pick from perf_lib_params.h file
    string structure_name = 9;
  };

  // Restrictions, if any
  repeated string constraints = 10;

  // Array of supported input data types
  repeated Datatypes operation_guids = 11;

  message ImgAttr {
    string img_name = 1;
    string width = 2;
    string height = 3;
    string align = 4;
  }

  // Array of images
  repeated ImgAttr image = 12;

  // Describes formula attributes
  message FormulaDef {
    //Mathematical equation to represent the concept
    string equation = 1;

    // If set, the equation can be referenced using the set label value
    string label = 2;
  }

  // Formulas
  repeated FormulaDef formula = 13;

  message TableAttr {
    string header = 1;
    string width = 2;
    repeated string row = 3;
    string label = 4;
    string caption = 5;
  }

  repeated TableAttr table = 14;

  // Human readable Guid name of the operators
  repeated string guid = 15;

  //Code
  repeated CodeDef code = 16;
  message CodeDef {
    //Description of the Code
    string description = 1;
  }

  // Examples
  repeated ExampleDef example = 17;

  message ExampleDef {
    //Description of the Example
    string description = 1;
  }
};

// A collection of OpDefs
message OpList {
  repeated OpDef op = 1;
};
